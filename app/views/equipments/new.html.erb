<div class="container">
  <div class="header">
    <div class="header-content">
      <h1>
        <i class="fas fa-plus"></i>
        Cadastrar Novo Equipamento
      </h1>
      <div class="header-actions">
        <%= link_to equipments_path, class: "btn btn-secondary" do %>
          <i class="fas fa-arrow-left" aria-hidden="true"></i>
          <span>Voltar para Equipamentos</span>
        <% end %>
      </div>
    </div>
  </div>

  <div class="form-container">
    <%= form_with(model: @equipment, url: equipments_path, local: true, class: "form") do |form| %>
      <%= render 'shared/form_errors', object: @equipment %>

      <div class="form-grid">
        <div class="form-section">
          <h2><i class="fas fa-info-circle"></i> Informa√ß√µes B√°sicas</h2>
          
          <%= render 'shared/form_field', 
              form: form, 
              object: @equipment,
              field: :serial_number, 
              label: 'N√∫mero de S√©rie',
              placeholder: 'Ex: TR001, DJ002, RL003',
              required: true,
              help_text: 'Identifica√ß√£o √∫nica do equipamento' %>

          <div class="form-group">
            <%= form.label :equipment_type_id, "Tipo de Equipamento", class: "form-label" %>
            <%= form.select :equipment_type_id, 
                options_from_collection_for_select(@equipment_types, :id, :name, @equipment.equipment_type_id),
                { prompt: "Selecione o tipo de equipamento" },
                { class: "form-select", required: true, id: "equipment-type-select" } %>
            <small class="form-help">
              <strong>üí° Dica:</strong> Escolha o tipo de equipamento para ver as caracter√≠sticas espec√≠ficas.
            </small>
          </div>

          <%= render 'shared/form_field', 
              form: form, 
              object: @equipment,
              field: :location, 
              type: :select,
              label: 'Localiza√ß√£o',
              options: [
                ['GP123', 'GP123'],
                ['GP140', 'GP140'],
                ['Escrit√≥rio', 'Escrit√≥rio'],
                ['Eduardo Super Trafo', 'Eduardo Super Trafo'],
                ['Estrada Tronco', 'Estrada Tronco']
              ],
              help_text: 'Local onde o equipamento est√° instalado' %>

        </div>

        <div class="form-section">
          <h2><i class="fas fa-calendar"></i> Datas</h2>
          
          <div class="form-group">
            <%= form.label :acquisition_date, "Data de Aquisi√ß√£o", class: "form-label" %>
            <%= form.date_field :acquisition_date, 
                class: "form-control date-input", 
                id: "acquisition-date",
                placeholder: "Selecione a data",
                max: Date.current.strftime('%Y-%m-%d') %>
            <small class="form-help">
              <i class="fas fa-calendar-alt"></i>
              <strong>Data de Aquisi√ß√£o:</strong> Clique no √≠cone do calend√°rio para selecionar a data
            </small>
          </div>

          <%= render 'shared/form_field', 
              form: form, 
              object: @equipment,
              field: :acquisition_price, 
              type: 'number',
              label: 'Pre√ßo de Aquisi√ß√£o (R$)',
              placeholder: 'Ex: 5000.00',
              help_text: 'Valor pago pela aquisi√ß√£o do equipamento' %>

          <%= render 'shared/form_field', 
              form: form, 
              object: @equipment,
              field: :bandeira, 
              type: :select,
              label: 'Bandeira',
              options: [
                ['Verde', 'Verde'],
                ['Amarelo', 'Amarelo'],
                ['Vermelho', 'Vermelho'],
                ['Preto', 'Preto'],
                ['Azul', 'Azul'],
                ['Verde/Amarelo', 'Verde/Amarelo']
              ],
              help_text: 'Classifica√ß√£o visual do equipamento' %>

          <div class="form-group">
            <%= form.label :photos, "Fotos do Equipamento", class: "form-label" %>
            <div class="photo-upload-area" id="photoUploadArea">
              <%= form.file_field :photos, multiple: true, accept: "image/*", class: "form-control photo-input", id: "photoInput" %>
              <div class="upload-hint">
                <i class="fas fa-cloud-upload-alt"></i>
                <span>Clique para selecionar fotos ou arraste aqui</span>
                <small>Formatos aceitos: JPG, PNG, GIF (m√°ximo 10 fotos)</small>
                <small class="upload-limit">Voc√™ pode selecionar m√∫ltiplas fotos de uma vez</small>
              </div>
            </div>
            
            <!-- Preview das fotos selecionadas -->
            <div id="photoPreview" class="photo-preview-container" style="display: none;">
              <h4>Fotos Selecionadas:</h4>
              <div id="photoPreviewGrid" class="photo-preview-grid">
                <!-- As previews ser√£o inseridas aqui via JavaScript -->
              </div>
              <small class="form-help">
                <i class="fas fa-info-circle"></i> 
                Voc√™ pode remover fotos clicando no X. Todas as fotos ser√£o salvas com o equipamento.
              </small>
            </div>
          </div>

          <div class="info-card">
            <h3><i class="fas fa-info-circle"></i> Informa√ß√µes</h3>
            <div class="info-content">
              <p><strong>Equipamentos Cadastrados:</strong> <%= Equipment.count %></p>
              <p><strong>Tipos Dispon√≠veis:</strong> <%= EquipmentType.active.count %></p>
              <div class="tip-message">
                <i class="fas fa-lightbulb"></i>
                <span>Ap√≥s selecionar o tipo de equipamento, aparecer√£o as caracter√≠sticas espec√≠ficas.</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Caracter√≠sticas Din√¢micas -->
      <div id="dynamic-features" class="features-section" style="display: none;">
        <h2><i class="fas fa-cogs"></i> Caracter√≠sticas do Equipamento</h2>
        <div id="features-container">
          <!-- As caracter√≠sticas ser√£o carregadas dinamicamente via JavaScript -->
        </div>
      </div>

      <div class="form-section">
        <h2><i class="fas fa-sticky-note"></i> Observa√ß√µes</h2>
        
        <%= render 'shared/form_field', 
            form: form, 
            object: @equipment,
            field: :notes, 
            type: 'textarea',
            label: 'Observa√ß√µes',
            placeholder: 'Observa√ß√µes adicionais sobre o equipamento...',
            rows: 4,
            help_text: 'Informa√ß√µes adicionais, hist√≥rico, observa√ß√µes importantes' %>
      </div>

      <div class="form-actions">
        <%= form.submit "Cadastrar Equipamento", class: "btn btn-primary" %>
        <%= link_to "Cancelar", equipments_path, class: "btn btn-outline" %>
      </div>
    <% end %>
  </div>
</div>

<style>
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.header {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 30px;
  border-radius: 12px;
  margin-bottom: 30px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.1);
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 20px;
}

.header h1 {
  margin: 0;
  font-size: 2.5rem;
  font-weight: 700;
  display: flex;
  align-items: center;
  gap: 15px;
}

.header-actions {
  display: flex;
  gap: 15px;
  flex-wrap: wrap;
}

.form-container {
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 20px rgba(0,0,0,0.08);
  overflow: hidden;
  border: 1px solid #e1e5e9;
}

.form {
  padding: 30px;
}

.form-grid {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 40px;
  margin-bottom: 30px;
}

.form-section {
  display: flex;
  flex-direction: column;
  gap: 25px;
  margin-bottom: 30px;
}

.form-section h2 {
  margin: 0;
  font-size: 1.4rem;
  font-weight: 600;
  color: #2c3e50;
  display: flex;
  align-items: center;
  gap: 10px;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.form-label {
  font-weight: 500;
  color: #374151;
  font-size: 0.9rem;
  display: flex;
  align-items: center;
  gap: 8px;
}

.form-select {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 0.9rem;
  background: white;
  transition: all 0.2s;
}

.form-select:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.form-help {
  color: #6b7280;
  font-size: 0.8rem;
  margin-top: 0.25rem;
}

.info-card {
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  padding: 20px;
}

.info-card h3 {
  margin: 0 0 15px 0;
  font-size: 1.1rem;
  font-weight: 600;
  color: #2c3e50;
  display: flex;
  align-items: center;
  gap: 8px;
}

.info-content p {
  margin: 8px 0;
  color: #374151;
  font-size: 0.9rem;
}

.tip-message {
  background: #dbeafe;
  border: 1px solid #3b82f6;
  border-radius: 6px;
  padding: 12px;
  margin-top: 15px;
  display: flex;
  align-items: center;
  gap: 8px;
  color: #1e40af;
  font-size: 0.9rem;
}

.features-section {
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 12px;
  padding: 25px;
  margin-bottom: 30px;
}

.features-section h2 {
  margin: 0 0 20px 0;
  font-size: 1.4rem;
  font-weight: 600;
  color: #2c3e50;
  display: flex;
  align-items: center;
  gap: 10px;
}

.feature-field {
  background: white;
  border: 1px solid #e1e5e9;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 15px;
}

.feature-field label {
  font-weight: 500;
  color: #374151;
  font-size: 0.9rem;
  display: block;
  margin-bottom: 8px;
}

.feature-field input,
.feature-field select,
.feature-field textarea {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 0.9rem;
  transition: all 0.2s;
}

.feature-field input:focus,
.feature-field select:focus,
.feature-field textarea:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.feature-required {
  color: #ef4444;
  font-size: 0.8rem;
  margin-top: 4px;
}

.form-actions {
  display: flex;
  gap: 15px;
  justify-content: flex-end;
  padding-top: 20px;
  border-top: 1px solid #e5e7eb;
}

.btn {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  font-size: 0.9rem;
  font-weight: 500;
  text-decoration: none;
  border: none;
  cursor: pointer;
  transition: all 0.2s;
}

.btn-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
}

.btn-secondary {
  background: #6b7280;
  color: white;
}

.btn-secondary:hover {
  background: #4b5563;
  transform: translateY(-1px);
}

.btn-outline {
  background: transparent;
  color: #6b7280;
  border: 1px solid #d1d5db;
}

.btn-outline:hover {
  background: #f9fafb;
  border-color: #9ca3af;
}

@media (max-width: 768px) {
  .form-grid {
    grid-template-columns: 1fr;
  }
  
  .header h1 {
    font-size: 2rem;
  }
  
  .form-actions {
    flex-direction: column;
  }
}

.loading {
  text-align: center;
  padding: 40px;
  color: #6b7280;
  font-size: 1.1rem;
}

.loading::before {
  content: '';
  display: inline-block;
  width: 20px;
  height: 20px;
  border: 2px solid #e5e7eb;
  border-radius: 50%;
  border-top-color: #3b82f6;
  animation: spin 1s ease-in-out infinite;
  margin-right: 10px;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const equipmentTypeSelect = document.getElementById('equipment-type-select');
  const dynamicFeatures = document.getElementById('dynamic-features');
  const featuresContainer = document.getElementById('features-container');

  // Fun√ß√£o para carregar caracter√≠sticas do tipo de equipamento
  function loadEquipmentFeatures(equipmentTypeId) {
    if (!equipmentTypeId) {
      dynamicFeatures.style.display = 'none';
      return;
    }

    // Mostrar loading
    featuresContainer.innerHTML = '<div class="loading">Carregando caracter√≠sticas...</div>';
    dynamicFeatures.style.display = 'block';

    // Tentar carregar via AJAX
    fetch(`/equipment_types/${equipmentTypeId}/equipment_features`, {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('Erro na requisi√ß√£o');
        }
        return response.json();
      })
      .then(features => {
        console.log('Features recebidas:', features);
        if (features && features.length > 0) {
          renderFeatures(features);
        } else {
          showBasicFeatures();
        }
      })
      .catch(error => {
        console.error('Erro ao carregar caracter√≠sticas:', error);
        // Fallback: mostrar caracter√≠sticas b√°sicas
        showBasicFeatures();
      });
  }

  // Fun√ß√£o para renderizar caracter√≠sticas
  function renderFeatures(features) {
    console.log('Renderizando features:', features);
    featuresContainer.innerHTML = '';
    
    features.forEach(feature => {
      console.log('Processando feature:', feature.name, 'com op√ß√µes:', feature.options);
      const fieldDiv = document.createElement('div');
      fieldDiv.className = 'feature-field';
      
      const label = document.createElement('label');
      label.textContent = feature.name;
      if (feature.required) {
        label.innerHTML += ' <span style="color: #ef4444;">*</span>';
      }
      
      const input = createInputForFeature(feature);
      
      fieldDiv.appendChild(label);
      fieldDiv.appendChild(input);
      
      // Adicionar texto de ajuda
      if (feature.required) {
        const requiredText = document.createElement('div');
        requiredText.className = 'feature-required';
        requiredText.textContent = 'Campo obrigat√≥rio';
        fieldDiv.appendChild(requiredText);
      }
      
      // Adicionar descri√ß√£o se existir
      if (feature.description) {
        const helpText = document.createElement('small');
        helpText.className = 'form-help';
        helpText.textContent = feature.description;
        fieldDiv.appendChild(helpText);
      }
      
      featuresContainer.appendChild(fieldDiv);
    });
  }

  // Fun√ß√£o para criar input baseado no tipo de dado
  function createInputForFeature(feature) {
    let input;
    
    switch (feature.data_type) {
      case 'select':
        console.log('Criando select para:', feature.name, 'com op√ß√µes:', feature.options);
        input = document.createElement('select');
        input.name = `feature_values[${feature.name}]`;
        input.className = 'form-select';
        
        // Adicionar op√ß√µes se existirem
        if (feature.options && feature.options.length > 0) {
          const defaultOption = document.createElement('option');
          defaultOption.value = '';
          defaultOption.textContent = 'Selecione uma op√ß√£o';
          input.appendChild(defaultOption);
          
          feature.options.forEach(option => {
            const optionElement = document.createElement('option');
            optionElement.value = option.value;
            optionElement.textContent = option.label || option.value;
            input.appendChild(optionElement);
          });
        } else {
          // Fallback para select sem op√ß√µes
          const defaultOption = document.createElement('option');
          defaultOption.value = '';
          defaultOption.textContent = 'Nenhuma op√ß√£o dispon√≠vel';
          input.appendChild(defaultOption);
        }
        break;
        
      case 'boolean':
        input = document.createElement('select');
        input.name = `feature_values[${feature.name}]`;
        input.className = 'form-select';
        
        const options = [
          { value: '', text: 'Selecione' },
          { value: 'true', text: 'Sim' },
          { value: 'false', text: 'N√£o' }
        ];
        
        options.forEach(option => {
          const optionElement = document.createElement('option');
          optionElement.value = option.value;
          optionElement.textContent = option.text;
          input.appendChild(optionElement);
        });
        break;
        
      case 'date':
        input = document.createElement('input');
        input.type = 'date';
        input.name = `feature_values[${feature.name}]`;
        input.className = 'form-control';
        break;
        
      case 'integer':
      case 'float':
        input = document.createElement('input');
        input.type = 'number';
        input.name = `feature_values[${feature.name}]`;
        input.className = 'form-control';
        input.placeholder = feature.unit ? `Ex: 100 ${feature.unit}` : 'Ex: 100';
        if (feature.data_type === 'float') {
          input.step = '0.01';
        }
        break;
        
      case 'string':
        input = document.createElement('textarea');
        input.name = `feature_values[${feature.name}]`;
        input.className = 'form-control';
        input.rows = 3;
        input.placeholder = 'Digite o texto...';
        break;
        
      default: // string
        input = document.createElement('input');
        input.type = 'text';
        input.name = `feature_values[${feature.name}]`;
        input.className = 'form-control';
        input.placeholder = 'Digite o valor...';
        break;
    }
    
    // Adicionar required se necess√°rio
    if (feature.required) {
      input.required = true;
    }
    
    return input;
  }

  // Fun√ß√£o fallback para mostrar mensagem de erro
  function showBasicFeatures() {
    featuresContainer.innerHTML = '<div class="alert alert-warning">N√£o foi poss√≠vel carregar as caracter√≠sticas. Tente novamente.</div>';
    dynamicFeatures.style.display = 'block';
  }

  // Event listener para mudan√ßa no tipo de equipamento
  equipmentTypeSelect.addEventListener('change', function() {
    const selectedTypeId = this.value;
    loadEquipmentFeatures(selectedTypeId);
  });

  // Carregar caracter√≠sticas se j√° houver um tipo selecionado
  if (equipmentTypeSelect.value) {
    loadEquipmentFeatures(equipmentTypeSelect.value);
  }

  // Event listener para mudan√ßa no tipo de equipamento
  equipmentTypeSelect.addEventListener('change', function() {
    const selectedTypeId = this.value;
    loadEquipmentFeatures(selectedTypeId);
  });

  // Carregar caracter√≠sticas se j√° houver um tipo selecionado
  if (equipmentTypeSelect.value) {
    loadEquipmentFeatures(equipmentTypeSelect.value);
  }

  // Gerenciamento de fotos
  const photoInput = document.getElementById('photoInput');
  const photoUploadArea = document.getElementById('photoUploadArea');
  const photoPreview = document.getElementById('photoPreview');
  const photoPreviewGrid = document.getElementById('photoPreviewGrid');
  
  let selectedFiles = [];

  // Drag and drop
  photoUploadArea.addEventListener('dragover', function(e) {
    e.preventDefault();
    this.classList.add('dragover');
  });

  photoUploadArea.addEventListener('dragleave', function(e) {
    e.preventDefault();
    this.classList.remove('dragover');
  });

  photoUploadArea.addEventListener('drop', function(e) {
    e.preventDefault();
    this.classList.remove('dragover');
    
    const files = Array.from(e.dataTransfer.files).filter(file => 
      file.type.startsWith('image/')
    );
    
    if (files.length > 0) {
      handleFileSelection(files);
    }
  });

  // File input change
  photoInput.addEventListener('change', function(e) {
    const files = Array.from(e.target.files);
    handleFileSelection(files);
  });

  function handleFileSelection(files) {
    // Limitar a 10 fotos
    const maxFiles = 10;
    const currentCount = selectedFiles.length;
    
    if (currentCount + files.length > maxFiles) {
      alert(`Voc√™ pode selecionar no m√°ximo ${maxFiles} fotos. Voc√™ j√° tem ${currentCount} selecionadas.`);
      return;
    }

    // Adicionar novos arquivos
    files.forEach(file => {
      if (file.type.startsWith('image/')) {
        selectedFiles.push(file);
      }
    });

    updatePhotoPreview();
    updateUploadArea();
  }

  function updatePhotoPreview() {
    photoPreviewGrid.innerHTML = '';
    
    if (selectedFiles.length === 0) {
      photoPreview.style.display = 'none';
      return;
    }

    photoPreview.style.display = 'block';
    
    selectedFiles.forEach((file, index) => {
      const reader = new FileReader();
      
      reader.onload = function(e) {
        const previewItem = document.createElement('div');
        previewItem.className = 'photo-preview-item';
        previewItem.innerHTML = `
          <img src="${e.target.result}" alt="Preview ${index + 1}">
          <div class="photo-preview-overlay">
            <button type="button" class="photo-preview-remove" onclick="removePhotoPreview(${index})" title="Remover foto">
              <i class="fas fa-times"></i>
            </button>
          </div>
          <span class="photo-preview-number">${index + 1}</span>
        `;
        
        photoPreviewGrid.appendChild(previewItem);
      };
      
      reader.readAsDataURL(file);
    });
  }

  function removePhotoPreview(index) {
    selectedFiles.splice(index, 1);
    updatePhotoPreview();
    updateUploadArea();
  }

  function updateUploadArea() {
    if (selectedFiles.length > 0) {
      photoUploadArea.classList.add('has-photos');
      const hint = photoUploadArea.querySelector('.upload-hint span');
      hint.textContent = `${selectedFiles.length} foto(s) selecionada(s)`;
    } else {
      photoUploadArea.classList.remove('has-photos');
      const hint = photoUploadArea.querySelector('.upload-hint span');
      hint.textContent = 'Clique para selecionar fotos ou arraste aqui';
    }
  }

  // Tornar fun√ß√£o global para uso no onclick
  window.removePhotoPreview = removePhotoPreview;
});
</script>

<style>
/* Campo de data com calend√°rio */
.date-input {
  position: relative;
}

.date-input::-webkit-calendar-picker-indicator {
  background: transparent;
  bottom: 0;
  color: transparent;
  cursor: pointer;
  height: auto;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  width: auto;
}

.date-input::-webkit-inner-spin-button {
  display: none;
}

.date-input::-webkit-clear-button {
  display: none;
}

/* √Årea de upload de fotos */
.photo-upload-area {
  border: 2px dashed #d1d5db;
  border-radius: 8px;
  padding: 24px;
  text-align: center;
  background: #f9fafb;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.photo-upload-area:hover {
  border-color: #3b82f6;
  background: #eff6ff;
}

.photo-input {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  cursor: pointer;
  z-index: 2;
}

.upload-hint {
  color: #6b7280;
  font-size: 0.875rem;
  line-height: 1.5;
}

.upload-hint i {
  font-size: 2rem;
  color: #9ca3af;
  margin-bottom: 8px;
  display: block;
}

.upload-hint span {
  display: block;
  font-weight: 500;
  margin-bottom: 4px;
  color: #374151;
}

.upload-hint small {
  display: block;
  margin-top: 4px;
  color: #6b7280;
}

.upload-limit {
  color: #10b981 !important;
  font-weight: 600;
}

/* Drag and drop */
.photo-upload-area.dragover {
  border-color: #3b82f6;
  background: #dbeafe;
  transform: scale(1.02);
}

/* Destacar quando h√° fotos selecionadas */
.photo-upload-area.has-photos {
  border-color: #10b981;
  background: #d1fae5;
}

.photo-upload-area.has-photos .upload-hint {
  color: #065f46;
}

.photo-upload-area.has-photos .upload-hint i {
  color: #10b981;
}

/* Preview das fotos */
.photo-preview-container {
  margin-top: 16px;
  padding: 16px;
  background: #f8fafc;
  border-radius: 8px;
  border: 1px solid #e5e7eb;
}

.photo-preview-container h4 {
  margin: 0 0 12px 0;
  font-size: 14px;
  font-weight: 600;
  color: #374151;
}

.photo-preview-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
  gap: 8px;
  margin-bottom: 12px;
}

.photo-preview-item {
  position: relative;
  border-radius: 6px;
  overflow: hidden;
  aspect-ratio: 1;
}

.photo-preview-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.photo-preview-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.photo-preview-item:hover .photo-preview-overlay {
  opacity: 1;
}

.photo-preview-remove {
  background: #ef4444;
  color: white;
  border: none;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 12px;
  transition: background 0.2s ease;
}

.photo-preview-remove:hover {
  background: #dc2626;
}

.photo-preview-number {
  position: absolute;
  top: 4px;
  left: 4px;
  background: rgba(0, 0, 0, 0.7);
  color: white;
  border-radius: 4px;
  padding: 2px 6px;
  font-size: 10px;
  font-weight: 600;
}

.current-photos {
  margin-top: 16px;
  padding: 16px;
  background: #f8fafc;
  border-radius: 8px;
  border: 1px solid #e5e7eb;
}

.current-photos h4 {
  margin: 0 0 12px 0;
  font-size: 14px;
  font-weight: 600;
  color: #374151;
}

.photo-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
  gap: 8px;
}

.photo-item {
  position: relative;
}

.photo-thumbnail {
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 6px;
  border: 2px solid #e5e7eb;
}

.photo-thumbnail:hover {
  border-color: #3b82f6;
  transform: scale(1.05);
  transition: all 0.2s ease;
}
</style>
