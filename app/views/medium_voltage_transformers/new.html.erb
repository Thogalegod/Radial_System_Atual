<div class="content-header">
  <h1 class="page-title">Novo Transformador MT</h1>
</div>

<div class="card">
  <%= form_with model: @medium_voltage_transformer, local: true do |form| %>
    <% if @medium_voltage_transformer.errors.any? %>
      <div class="alert alert-danger">
        <h4>Erro ao salvar:</h4>
        <ul>
          <% @medium_voltage_transformer.errors.full_messages.each do |msg| %>
            <li><%= msg %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <div class="form-group">
      <%= form.label :serial_number, 'Número de Série', class: 'form-label' %>
      <%= form.text_field :serial_number, class: 'form-control', required: true %>
    </div>



    <div class="form-group">
      <%= form.label :bt_option_id, 'Tensão Secundária (V)', class: 'form-label' %>
      <div style="display: flex; gap: 8px; align-items: center; margin-bottom: 8px;">
        <%= form.collection_select :bt_option_id, 
            BtOption.order(:value), 
            :id, 
            :value, 
            { prompt: "Selecione uma tensão secundária" }, 
            { class: "form-control", required: true, style: "flex: 1;" } %>
        <button type="button" class="btn btn-secondary" onclick="openVoltageModal()">
          <span>+</span>
          <span>Adicionar</span>
        </button>
      </div>
      
      <!-- Lista de tensões existentes -->
      <div style="background: #f9fafb; padding: 12px; border-radius: 6px; margin-top: 8px;">
        <h4 style="font-size: 14px; margin-bottom: 8px; color: #374151;">Tensões disponíveis:</h4>
        <div id="voltage-list" style="display: flex; flex-wrap: wrap; gap: 8px;">
          <% BtOption.order(:value).each do |voltage| %>
            <div class="voltage-item" data-id="<%= voltage.id %>">
              <span style="display: inline-block; padding: 4px 12px; border-radius: 6px; background: <%= voltage.color %>; color: #fff; font-weight: 600; font-size: 12px;">
                <%= voltage.value %> V
              </span>
              <button type="button" class="btn btn-danger btn-icon" style="margin-left: 4px; padding: 2px 6px; font-size: 10px;" onclick="deleteVoltage(<%= voltage.id %>)" title="Remover">
                <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="3,6 5,6 21,6"/>
                  <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"/>
                  <line x1="10" y1="11" x2="10" y2="17"/>
                  <line x1="14" y1="11" x2="14" y2="17"/>
                </svg>
              </button>
            </div>
          <% end %>
        </div>
      </div>
    </div>



    <div class="form-group">
      <%= form.label :power_option_id, 'Potência (kVA)', class: 'form-label' %>
      <div style="display: flex; gap: 8px; align-items: center; margin-bottom: 8px;">
        <%= form.collection_select :power_option_id, 
            PowerOption.order(:value), 
            :id, 
            :value, 
            { prompt: "Selecione uma potência" }, 
            { class: "form-control", style: "flex: 1;" } %>
        <button type="button" class="btn btn-secondary" onclick="openPowerModal()">
          <span>+</span>
          <span>Adicionar</span>
        </button>
      </div>
      
      <!-- Lista de potências existentes -->
      <div style="background: #f9fafb; padding: 12px; border-radius: 6px; margin-top: 8px;">
        <h4 style="font-size: 14px; margin-bottom: 8px; color: #374151;">Potências disponíveis:</h4>
        <div id="power-list" style="display: flex; flex-wrap: wrap; gap: 8px;">
          <% PowerOption.order(:value).each do |power| %>
            <div class="power-item" data-id="<%= power.id %>">
              <span style="display: inline-block; padding: 4px 12px; border-radius: 6px; background: <%= power.color %>; color: #fff; font-weight: 600; font-size: 12px;">
                <%= power.value %> kVA
              </span>
              <button type="button" class="btn btn-danger btn-icon" style="margin-left: 4px; padding: 2px 6px; font-size: 10px;" onclick="deletePower(<%= power.id %>)" title="Remover">
                <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="3,6 5,6 21,6"/>
                  <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"/>
                  <line x1="10" y1="11" x2="10" y2="17"/>
                  <line x1="14" y1="11" x2="14" y2="17"/>
                </svg>
              </button>
            </div>
          <% end %>
        </div>
      </div>
    </div>



    <div class="form-group">
      <%= form.label :location_id, 'Localização', class: 'form-label' %>
      <div style="display: flex; gap: 8px; align-items: center; margin-bottom: 8px;">
        <%= form.collection_select :location_id, 
            Location.order(:value), 
            :id, 
            :value, 
            { prompt: "Selecione uma localização" }, 
            { class: "form-control", style: "flex: 1;" } %>
        <button type="button" class="btn btn-secondary" onclick="openLocationModal()">
          <span>+</span>
          <span>Adicionar</span>
        </button>
      </div>
      
      <!-- Lista de localizações existentes -->
      <div style="background: #f9fafb; padding: 12px; border-radius: 6px; margin-top: 8px;">
        <h4 style="font-size: 14px; margin-bottom: 8px; color: #374151;">Localizações disponíveis:</h4>
        <div id="location-list" style="display: flex; flex-wrap: wrap; gap: 8px;">
          <% Location.order(:value).each do |location| %>
            <div class="location-item" data-id="<%= location.id %>">
              <span style="display: inline-block; padding: 4px 12px; border-radius: 6px; background: <%= location.color %>; color: #fff; font-weight: 600; font-size: 12px;">
                <%= location.value %>
              </span>
              <button type="button" class="btn btn-danger btn-icon" style="margin-left: 4px; padding: 2px 6px; font-size: 10px;" onclick="deleteLocation(<%= location.id %>)" title="Remover">
                <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="3,6 5,6 21,6"/>
                  <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"/>
                  <line x1="10" y1="11" x2="10" y2="17"/>
                  <line x1="14" y1="11" x2="14" y2="17"/>
                </svg>
              </button>
            </div>
          <% end %>
        </div>
      </div>
    </div>

    <div class="form-group">
      <%= form.label :status_id, 'Status', class: 'form-label' %>
      <div style="display: flex; gap: 8px; align-items: center; margin-bottom: 8px;">
        <%= form.collection_select :status_id, 
            Status.order(:value), 
            :id, 
            :value, 
            { prompt: "Selecione um status" }, 
            { class: "form-control", style: "flex: 1;" } %>
        <button type="button" class="btn btn-secondary" onclick="openStatusModal()">
          <span>+</span>
          <span>Adicionar</span>
        </button>
      </div>
      
      <!-- Lista de status existentes -->
      <div style="background: #f9fafb; padding: 12px; border-radius: 6px; margin-top: 8px;">
        <h4 style="font-size: 14px; margin-bottom: 8px; color: #374151;">Status disponíveis:</h4>
        <div id="status-list" style="display: flex; flex-wrap: wrap; gap: 8px;">
          <% Status.order(:value).each do |status| %>
            <div class="status-item" data-id="<%= status.id %>">
              <span style="display: inline-block; padding: 4px 12px; border-radius: 6px; background: <%= status.color %>; color: #fff; font-weight: 600; font-size: 12px;">
                <%= status.value %>
              </span>
              <button type="button" class="btn btn-danger btn-icon" style="margin-left: 4px; padding: 2px 6px; font-size: 10px;" onclick="deleteStatus(<%= status.id %>)" title="Remover">
                <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="3,6 5,6 21,6"/>
                  <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"/>
                  <line x1="10" y1="11" x2="10" y2="17"/>
                  <line x1="14" y1="11" x2="14" y2="17"/>
                </svg>
              </button>
            </div>
          <% end %>
        </div>
      </div>
    </div>

    <div class="form-group">
      <%= form.label :cooling_option_id, 'Refrigeração', class: 'form-label' %>
      <div style="display: flex; gap: 8px; align-items: center; margin-bottom: 8px;">
        <%= form.collection_select :cooling_option_id, 
            CoolingOption.order(:value), 
            :id, 
            :value, 
            { prompt: "Selecione uma refrigeração" }, 
            { class: "form-control", style: "flex: 1;" } %>
        <button type="button" class="btn btn-secondary" onclick="openCoolingModal()">
          <span>+</span>
          <span>Adicionar</span>
        </button>
      </div>
      
      <!-- Lista de refrigerações existentes -->
      <div style="background: #f9fafb; padding: 12px; border-radius: 6px; margin-top: 8px;">
        <h4 style="font-size: 14px; margin-bottom: 8px; color: #374151;">Refrigerações disponíveis:</h4>
        <div id="cooling-list" style="display: flex; flex-wrap: wrap; gap: 8px;">
          <% CoolingOption.order(:value).each do |cooling| %>
            <div class="cooling-item" data-id="<%= cooling.id %>">
              <span style="display: inline-block; padding: 4px 12px; border-radius: 6px; background: <%= cooling.color %>; color: #fff; font-weight: 600; font-size: 12px;">
                <%= cooling.value %>
              </span>
              <button type="button" class="btn btn-danger btn-icon" style="margin-left: 4px; padding: 2px 6px; font-size: 10px;" onclick="deleteCooling(<%= cooling.id %>)" title="Remover">
                <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="3,6 5,6 21,6"/>
                  <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"/>
                  <line x1="10" y1="11" x2="10" y2="17"/>
                  <line x1="14" y1="11" x2="14" y2="17"/>
                </svg>
              </button>
            </div>
          <% end %>
        </div>
      </div>
    </div>

    <div class="form-group">
      <%= form.label :flag_option_id, 'Bandeira', class: 'form-label' %>
      <div style="display: flex; gap: 8px; align-items: center; margin-bottom: 8px;">
        <%= form.collection_select :flag_option_id, 
            FlagOption.order(:value), 
            :id, 
            :value, 
            { prompt: "Selecione uma bandeira" }, 
            { class: "form-control", style: "flex: 1;" } %>
        <button type="button" class="btn btn-secondary" onclick="openFlagModal()">
          <span>+</span>
          <span>Adicionar</span>
        </button>
      </div>
      
      <!-- Lista de bandeiras existentes -->
      <div style="background: #f9fafb; padding: 12px; border-radius: 6px; margin-top: 8px;">
        <h4 style="font-size: 14px; margin-bottom: 8px; color: #374151;">Bandeiras disponíveis:</h4>
        <div id="flag-list" style="display: flex; flex-wrap: wrap; gap: 8px;">
          <% FlagOption.order(:value).each do |flag| %>
            <div class="flag-item" data-id="<%= flag.id %>">
              <span style="display: inline-block; padding: 4px 12px; border-radius: 6px; background: <%= flag.color %>; color: #fff; font-weight: 600; font-size: 12px;">
                <%= flag.value %>
              </span>
              <button type="button" class="btn btn-danger btn-icon" style="margin-left: 4px; padding: 2px 6px; font-size: 10px;" onclick="deleteFlag(<%= flag.id %>)" title="Remover">
                <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="3,6 5,6 21,6"/>
                  <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"/>
                  <line x1="10" y1="11" x2="10" y2="17"/>
                  <line x1="14" y1="11" x2="14" y2="17"/>
                </svg>
              </button>
            </div>
          <% end %>
        </div>
      </div>
    </div>

    <div class="form-group">
      <%= form.label :installation_option_id, 'Instalação', class: 'form-label' %>
      <div style="display: flex; gap: 8px; align-items: center; margin-bottom: 8px;">
        <%= form.collection_select :installation_option_id, 
            InstallationOption.order(:value), 
            :id, 
            :value, 
            { prompt: "Selecione uma instalação" }, 
            { class: "form-control", style: "flex: 1;" } %>
        <button type="button" class="btn btn-secondary" onclick="openInstallationModal()">
          <span>+</span>
          <span>Adicionar</span>
        </button>
      </div>
      
      <!-- Lista de instalações existentes -->
      <div style="background: #f9fafb; padding: 12px; border-radius: 6px; margin-top: 8px;">
        <h4 style="font-size: 14px; margin-bottom: 8px; color: #374151;">Instalações disponíveis:</h4>
        <div id="installation-list" style="display: flex; flex-wrap: wrap; gap: 8px;">
          <% InstallationOption.order(:value).each do |installation| %>
            <div class="installation-item" data-id="<%= installation.id %>">
              <span style="display: inline-block; padding: 4px 12px; border-radius: 6px; background: <%= installation.color %>; color: #fff; font-weight: 600; font-size: 12px;">
                <%= installation.value %>
              </span>
              <button type="button" class="btn btn-danger btn-icon" style="margin-left: 4px; padding: 2px 6px; font-size: 10px;" onclick="deleteInstallation(<%= installation.id %>)" title="Remover">
                <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <polyline points="3,6 5,6 21,6"/>
                  <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"/>
                  <line x1="10" y1="11" x2="10" y2="17"/>
                  <line x1="14" y1="11" x2="14" y2="17"/>
                </svg>
              </button>
            </div>
          <% end %>
        </div>
      </div>
    </div>

    <div class="form-group">
      <%= form.label :notes, 'Observações', class: 'form-label' %>
      <%= form.text_area :notes, class: 'form-control', rows: 3 %>
    </div>

    <div style="margin-top: 24px; display: flex; gap: 12px;">
      <%= form.submit 'Salvar', class: 'btn btn-primary' %>
      <%= link_to 'Cancelar', medium_voltage_transformers_path, class: 'btn btn-secondary' %>
    </div>
  <% end %>
</div>



<!-- Modal para adicionar tensão -->
<div id="voltageModal" class="modal-overlay">
  <div class="modal" style="max-width: 400px;">
    <div class="modal-header">
      <h3>Adicionar Tensão Secundária</h3>
      <button type="button" class="btn btn-icon" onclick="closeVoltageModal()">×</button>
    </div>
    <div class="modal-body">
      <div class="form-group">
        <label class="form-label">Valor (V)</label>
        <input type="number" id="newVoltageValue" class="form-control" min="1" required>
      </div>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closeVoltageModal()">Cancelar</button>
      <button type="button" class="btn btn-primary" onclick="addVoltage()">Adicionar</button>
    </div>
  </div>
</div>

<!-- Modal para adicionar localização -->
<div id="locationModal" class="modal-overlay">
  <div class="modal" style="max-width: 400px;">
    <div class="modal-header">
      <h3>Adicionar Localização</h3>
      <button type="button" class="btn btn-icon" onclick="closeLocationModal()">×</button>
    </div>
    <div class="modal-body">
      <div class="form-group">
        <label class="form-label">Nome da Localização</label>
        <input type="text" id="newLocationValue" class="form-control" required>
      </div>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closeLocationModal()">Cancelar</button>
      <button type="button" class="btn btn-primary" onclick="addLocation()">Adicionar</button>
    </div>
  </div>
</div>

<!-- Modal para adicionar status -->
<div id="statusModal" class="modal-overlay">
  <div class="modal" style="max-width: 400px;">
    <div class="modal-header">
      <h3>Adicionar Status</h3>
      <button type="button" class="btn btn-icon" onclick="closeStatusModal()">×</button>
    </div>
    <div class="modal-body">
      <div class="form-group">
        <label class="form-label">Nome do Status</label>
        <input type="text" id="newStatusValue" class="form-control" required>
      </div>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closeStatusModal()">Cancelar</button>
      <button type="button" class="btn btn-primary" onclick="addStatus()">Adicionar</button>
    </div>
  </div>
</div>

<!-- Modal para adicionar potência -->
<div id="powerModal" class="modal-overlay">
  <div class="modal" style="max-width: 400px;">
    <div class="modal-header">
      <h3>Adicionar Potência</h3>
      <button type="button" class="btn btn-icon" onclick="closePowerModal()">×</button>
    </div>
    <div class="modal-body">
      <div class="form-group">
        <label for="newPowerValue" class="form-label">Valor (kVA)</label>
        <input type="number" id="newPowerValue" class="form-control" placeholder="Ex: 100" min="1">
      </div>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closePowerModal()">Cancelar</button>
      <button type="button" class="btn btn-primary" onclick="addPower()">Adicionar</button>
    </div>
  </div>
</div>

<!-- Modal para adicionar refrigeração -->
<div id="coolingModal" class="modal-overlay">
  <div class="modal" style="max-width: 400px;">
    <div class="modal-header">
      <h3>Adicionar Refrigeração</h3>
      <button type="button" class="btn btn-icon" onclick="closeCoolingModal()">×</button>
    </div>
    <div class="modal-body">
      <div class="form-group">
        <label class="form-label">Nome da Refrigeração</label>
        <input type="text" id="newCoolingValue" class="form-control" required>
      </div>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closeCoolingModal()">Cancelar</button>
      <button type="button" class="btn btn-primary" onclick="addCooling()">Adicionar</button>
    </div>
  </div>
</div>

<!-- Modal para adicionar bandeira -->
<div id="flagModal" class="modal-overlay">
  <div class="modal" style="max-width: 400px;">
    <div class="modal-header">
      <h3>Adicionar Bandeira</h3>
      <button type="button" class="btn btn-icon" onclick="closeFlagModal()">×</button>
    </div>
    <div class="modal-body">
      <div class="form-group">
        <label class="form-label">Nome da Bandeira</label>
        <input type="text" id="newFlagValue" class="form-control" required>
      </div>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closeFlagModal()">Cancelar</button>
      <button type="button" class="btn btn-primary" onclick="addFlag()">Adicionar</button>
    </div>
  </div>
</div>

<!-- Modal para adicionar instalação -->
<div id="installationModal" class="modal-overlay">
  <div class="modal" style="max-width: 400px;">
    <div class="modal-header">
      <h3>Adicionar Instalação</h3>
      <button type="button" class="btn btn-icon" onclick="closeInstallationModal()">×</button>
    </div>
    <div class="modal-body">
      <div class="form-group">
        <label class="form-label">Nome da Instalação</label>
        <input type="text" id="newInstallationValue" class="form-control" required>
      </div>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closeInstallationModal()">Cancelar</button>
      <button type="button" class="btn btn-primary" onclick="addInstallation()">Adicionar</button>
    </div>
  </div>
</div>



<script>


function openVoltageModal() {
  document.getElementById('voltageModal').classList.add('show');
}

function closeVoltageModal() {
  document.getElementById('voltageModal').classList.remove('show');
  document.getElementById('newVoltageValue').value = '';
}



function addVoltage() {
  const value = document.getElementById('newVoltageValue').value;
  if (!value) {
    alert('Por favor, insira um valor');
    return;
  }
  
  console.log('Tentando adicionar tensão:', value);
  
  // Criar um formulário temporário para enviar os dados
  const form = document.createElement('form');
  form.method = 'POST';
  form.action = '/bt_options';
  
  // Adicionar CSRF token
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  const csrfInput = document.createElement('input');
  csrfInput.type = 'hidden';
  csrfInput.name = 'authenticity_token';
  csrfInput.value = csrfToken;
  form.appendChild(csrfInput);
  
  // Adicionar valor da tensão
  const valueInput = document.createElement('input');
  valueInput.type = 'hidden';
  valueInput.name = 'bt_option[value]';
  valueInput.value = value;
  form.appendChild(valueInput);
  
  // Adicionar redirecionamento de volta
  const redirectInput = document.createElement('input');
  redirectInput.type = 'hidden';
  redirectInput.name = 'redirect_to';
  redirectInput.value = window.location.href;
  form.appendChild(redirectInput);
  
  // Adicionar ao DOM e submeter
  document.body.appendChild(form);
  form.submit();
}



function deleteVoltage(id) {
  if (!confirm('Tem certeza que deseja remover esta tensão?')) return;
  
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  
  fetch(`/bt_options/${id}`, {
    method: 'DELETE',
    headers: {
      'X-CSRF-Token': csrfToken,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      redirect_to: window.location.href
    })
  })
  .then(response => {
    if (response.redirected) {
      window.location.href = response.url;
    } else {
      return response.text();
    }
  })
  .then(html => {
    if (html) {
      // Extrair mensagem de erro da resposta
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const alert = doc.querySelector('.alert');
      if (alert) {
        alert(alert.textContent.trim());
      } else {
        window.location.reload();
      }
    }
  })
  .catch(error => {
    console.error('Erro:', error);
    alert('Erro ao remover tensão. Tente novamente.');
  });
}

function openLocationModal() {
  document.getElementById('locationModal').classList.add('show');
}

function closeLocationModal() {
  document.getElementById('locationModal').classList.remove('show');
  document.getElementById('newLocationValue').value = '';
}

function openStatusModal() {
  document.getElementById('statusModal').classList.add('show');
}

function closeStatusModal() {
  document.getElementById('statusModal').classList.remove('show');
  document.getElementById('newStatusValue').value = '';
}

function openPowerModal() {
  document.getElementById('powerModal').classList.add('show');
}

function closePowerModal() {
  document.getElementById('powerModal').classList.remove('show');
  document.getElementById('newPowerValue').value = '';
}

function addLocation() {
  const value = document.getElementById('newLocationValue').value;
  if (!value) {
    alert('Por favor, insira um valor');
    return;
  }
  
  console.log('Tentando adicionar localização:', value);
  
  // Criar um formulário temporário para enviar os dados
  const form = document.createElement('form');
  form.method = 'POST';
  form.action = '/locations';
  
  // Adicionar CSRF token
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  const csrfInput = document.createElement('input');
  csrfInput.type = 'hidden';
  csrfInput.name = 'authenticity_token';
  csrfInput.value = csrfToken;
  form.appendChild(csrfInput);
  
  // Adicionar valor da localização
  const valueInput = document.createElement('input');
  valueInput.type = 'hidden';
  valueInput.name = 'location[value]';
  valueInput.value = value;
  form.appendChild(valueInput);
  
  // Adicionar redirecionamento de volta
  const redirectInput = document.createElement('input');
  redirectInput.type = 'hidden';
  redirectInput.name = 'redirect_to';
  redirectInput.value = window.location.href;
  form.appendChild(redirectInput);
  
  // Adicionar ao DOM e submeter
  document.body.appendChild(form);
  form.submit();
}

function addStatus() {
  const value = document.getElementById('newStatusValue').value;
  if (!value) {
    alert('Por favor, insira um valor');
    return;
  }
  
  console.log('Tentando adicionar status:', value);
  
  // Criar um formulário temporário para enviar os dados
  const form = document.createElement('form');
  form.method = 'POST';
  form.action = '/statuses';
  
  // Adicionar CSRF token
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  const csrfInput = document.createElement('input');
  csrfInput.type = 'hidden';
  csrfInput.name = 'authenticity_token';
  csrfInput.value = csrfToken;
  form.appendChild(csrfInput);
  
  // Adicionar valor do status
  const valueInput = document.createElement('input');
  valueInput.type = 'hidden';
  valueInput.name = 'status[value]';
  valueInput.value = value;
  form.appendChild(valueInput);
  
  // Adicionar redirecionamento de volta
  const redirectInput = document.createElement('input');
  redirectInput.type = 'hidden';
  redirectInput.name = 'redirect_to';
  redirectInput.value = window.location.href;
  form.appendChild(redirectInput);
  
  // Adicionar ao DOM e submeter
  document.body.appendChild(form);
  form.submit();
}

function deleteLocation(id) {
  if (!confirm('Tem certeza que deseja remover esta localização?')) return;
  
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  
  fetch(`/locations/${id}`, {
    method: 'DELETE',
    headers: {
      'X-CSRF-Token': csrfToken,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      redirect_to: window.location.href
    })
  })
  .then(response => {
    if (response.redirected) {
      window.location.href = response.url;
    } else {
      return response.text();
    }
  })
  .then(html => {
    if (html) {
      // Extrair mensagem de erro da resposta
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const alert = doc.querySelector('.alert');
      if (alert) {
        alert(alert.textContent.trim());
      } else {
        window.location.reload();
      }
    }
  })
  .catch(error => {
    console.error('Erro:', error);
    alert('Erro ao remover localização. Tente novamente.');
  });
}

function deleteStatus(id) {
  if (!confirm('Tem certeza que deseja remover este status?')) return;
  
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  
  fetch(`/statuses/${id}`, {
    method: 'DELETE',
    headers: {
      'X-CSRF-Token': csrfToken,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      redirect_to: window.location.href
    })
  })
  .then(response => {
    if (response.redirected) {
      window.location.href = response.url;
    } else {
      return response.text();
    }
  })
  .then(html => {
    if (html) {
      // Extrair mensagem de erro da resposta
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const alert = doc.querySelector('.alert');
      if (alert) {
        alert(alert.textContent.trim());
      } else {
        window.location.reload();
      }
    }
  })
  .catch(error => {
    console.error('Erro:', error);
    alert('Erro ao remover status. Tente novamente.');
  });
}

function addPower() {
  const value = document.getElementById('newPowerValue').value;
  if (!value) {
    alert('Por favor, insira um valor');
    return;
  }
  
  console.log('Tentando adicionar potência:', value);
  
  // Criar um formulário temporário para enviar os dados
  const form = document.createElement('form');
  form.method = 'POST';
  form.action = '/power_options';
  
  // Adicionar CSRF token
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  const csrfInput = document.createElement('input');
  csrfInput.type = 'hidden';
  csrfInput.name = 'authenticity_token';
  csrfInput.value = csrfToken;
  form.appendChild(csrfInput);
  
  // Adicionar valor da potência
  const valueInput = document.createElement('input');
  valueInput.type = 'hidden';
  valueInput.name = 'power_option[value]';
  valueInput.value = value;
  form.appendChild(valueInput);
  
  // Adicionar redirecionamento de volta
  const redirectInput = document.createElement('input');
  redirectInput.type = 'hidden';
  redirectInput.name = 'redirect_to';
  redirectInput.value = window.location.href;
  form.appendChild(redirectInput);
  
  // Adicionar ao DOM e submeter
  document.body.appendChild(form);
  form.submit();
}

function deletePower(id) {
  if (!confirm('Tem certeza que deseja remover esta potência?')) return;
  
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  
  fetch(`/power_options/${id}`, {
    method: 'DELETE',
    headers: {
      'X-CSRF-Token': csrfToken,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      redirect_to: window.location.href
    })
  })
  .then(response => {
    if (response.redirected) {
      window.location.href = response.url;
    } else {
      return response.text();
    }
  })
  .then(html => {
    if (html) {
      // Extrair mensagem de erro da resposta
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const alert = doc.querySelector('.alert');
      if (alert) {
        alert(alert.textContent.trim());
      } else {
        window.location.reload();
      }
    }
  })
  .catch(error => {
    console.error('Erro:', error);
    alert('Erro ao remover potência. Tente novamente.');
  });
}

function openCoolingModal() {
  document.getElementById('coolingModal').classList.add('show');
}

function closeCoolingModal() {
  document.getElementById('coolingModal').classList.remove('show');
  document.getElementById('newCoolingValue').value = '';
}

function openFlagModal() {
  document.getElementById('flagModal').classList.add('show');
}

function closeFlagModal() {
  document.getElementById('flagModal').classList.remove('show');
  document.getElementById('newFlagValue').value = '';
}

function openInstallationModal() {
  document.getElementById('installationModal').classList.add('show');
}

function closeInstallationModal() {
  document.getElementById('installationModal').classList.remove('show');
  document.getElementById('newInstallationValue').value = '';
}

function addCooling() {
  const value = document.getElementById('newCoolingValue').value;
  if (!value) {
    alert('Por favor, insira um valor');
    return;
  }
  
  console.log('Tentando adicionar refrigeração:', value);
  
  // Criar um formulário temporário para enviar os dados
  const form = document.createElement('form');
  form.method = 'POST';
  form.action = '/cooling_options';
  
  // Adicionar CSRF token
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  const csrfInput = document.createElement('input');
  csrfInput.type = 'hidden';
  csrfInput.name = 'authenticity_token';
  csrfInput.value = csrfToken;
  form.appendChild(csrfInput);
  
  // Adicionar valor da refrigeração
  const valueInput = document.createElement('input');
  valueInput.type = 'hidden';
  valueInput.name = 'cooling_option[value]';
  valueInput.value = value;
  form.appendChild(valueInput);
  
  // Adicionar redirecionamento de volta
  const redirectInput = document.createElement('input');
  redirectInput.type = 'hidden';
  redirectInput.name = 'redirect_to';
  redirectInput.value = window.location.href;
  form.appendChild(redirectInput);
  
  // Adicionar ao DOM e submeter
  document.body.appendChild(form);
  form.submit();
}

function deleteCooling(id) {
  if (!confirm('Tem certeza que deseja remover esta refrigeração?')) return;
  
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  
  fetch(`/cooling_options/${id}`, {
    method: 'DELETE',
    headers: {
      'X-CSRF-Token': csrfToken,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      redirect_to: window.location.href
    })
  })
  .then(response => {
    if (response.redirected) {
      window.location.href = response.url;
    } else {
      return response.text();
    }
  })
  .then(html => {
    if (html) {
      // Extrair mensagem de erro da resposta
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const alert = doc.querySelector('.alert');
      if (alert) {
        alert(alert.textContent.trim());
      } else {
        window.location.reload();
      }
    }
  })
  .catch(error => {
    console.error('Erro:', error);
    alert('Erro ao remover refrigeração. Tente novamente.');
  });
}

function addFlag() {
  const value = document.getElementById('newFlagValue').value;
  if (!value) {
    alert('Por favor, insira um valor');
    return;
  }
  
  console.log('Tentando adicionar bandeira:', value);
  
  // Criar um formulário temporário para enviar os dados
  const form = document.createElement('form');
  form.method = 'POST';
  form.action = '/flag_options';
  
  // Adicionar CSRF token
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  const csrfInput = document.createElement('input');
  csrfInput.type = 'hidden';
  csrfInput.name = 'authenticity_token';
  csrfInput.value = csrfToken;
  form.appendChild(csrfInput);
  
  // Adicionar valor da bandeira
  const valueInput = document.createElement('input');
  valueInput.type = 'hidden';
  valueInput.name = 'flag_option[value]';
  valueInput.value = value;
  form.appendChild(valueInput);
  
  // Adicionar redirecionamento de volta
  const redirectInput = document.createElement('input');
  redirectInput.type = 'hidden';
  redirectInput.name = 'redirect_to';
  redirectInput.value = window.location.href;
  form.appendChild(redirectInput);
  
  // Adicionar ao DOM e submeter
  document.body.appendChild(form);
  form.submit();
}

function deleteFlag(id) {
  if (!confirm('Tem certeza que deseja remover esta bandeira?')) return;
  
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  
  fetch(`/flag_options/${id}`, {
    method: 'DELETE',
    headers: {
      'X-CSRF-Token': csrfToken,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      redirect_to: window.location.href
    })
  })
  .then(response => {
    if (response.redirected) {
      window.location.href = response.url;
    } else {
      return response.text();
    }
  })
  .then(html => {
    if (html) {
      // Extrair mensagem de erro da resposta
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const alert = doc.querySelector('.alert');
      if (alert) {
        alert(alert.textContent.trim());
      } else {
        window.location.reload();
      }
    }
  })
  .catch(error => {
    console.error('Erro:', error);
    alert('Erro ao remover bandeira. Tente novamente.');
  });
}

function addInstallation() {
  const value = document.getElementById('newInstallationValue').value;
  if (!value) {
    alert('Por favor, insira um valor');
    return;
  }
  
  console.log('Tentando adicionar instalação:', value);
  
  // Criar um formulário temporário para enviar os dados
  const form = document.createElement('form');
  form.method = 'POST';
  form.action = '/installation_options';
  
  // Adicionar CSRF token
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  const csrfInput = document.createElement('input');
  csrfInput.type = 'hidden';
  csrfInput.name = 'authenticity_token';
  csrfInput.value = csrfToken;
  form.appendChild(csrfInput);
  
  // Adicionar valor da instalação
  const valueInput = document.createElement('input');
  valueInput.type = 'hidden';
  valueInput.name = 'installation_option[value]';
  valueInput.value = value;
  form.appendChild(valueInput);
  
  // Adicionar redirecionamento de volta
  const redirectInput = document.createElement('input');
  redirectInput.type = 'hidden';
  redirectInput.name = 'redirect_to';
  redirectInput.value = window.location.href;
  form.appendChild(redirectInput);
  
  // Adicionar ao DOM e submeter
  document.body.appendChild(form);
  form.submit();
}

function deleteInstallation(id) {
  if (!confirm('Tem certeza que deseja remover esta instalação?')) return;
  
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  
  fetch(`/installation_options/${id}`, {
    method: 'DELETE',
    headers: {
      'X-CSRF-Token': csrfToken,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      redirect_to: window.location.href
    })
  })
  .then(response => {
    if (response.redirected) {
      window.location.href = response.url;
    } else {
      return response.text();
    }
  })
  .then(html => {
    if (html) {
      // Extrair mensagem de erro da resposta
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const alert = doc.querySelector('.alert');
      if (alert) {
        alert(alert.textContent.trim());
      } else {
        window.location.reload();
      }
    }
  })
  .catch(error => {
    console.error('Erro:', error);
    alert('Erro ao remover instalação. Tente novamente.');
  });
}








</script>


